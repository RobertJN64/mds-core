#!/bin/bash

set -e
set -u
set -o pipefail

BASE_DIR=$(dirname $0)/..
: ${NODE_ENV:=""}
: ${REGISTRY:=""}
if [[ -n "$REGISTRY" ]]; then  # if non-empty
  REGISTRY="$(echo $REGISTRY | sed 's#/$##')/"  # ensure '/' suffix
fi
if [[ ! -d "$BASE_DIR/dist" ]]; then mkdir $BASE_DIR/dist; fi

buildImage() {
  local repo=$(echo $1 | cut -f1 -d":")
  local tag=$(echo $1 | cut -f2 -d":")
  if [[ "$tag" != "latest" ]]; then
    image="${repo}:$(getBranchSuffix)-$(getCommitHash)"
  fi

  local system_arch=$(uname -m)

  $(produceDockerPackageJson)

  if [[ "$system_arch" == "x86_64" ]]; then
    docker build -t ${REGISTRY}${image} .
  else
    local BUILD_ARM=${BUILD_ARM:-''}
    if [[ $BUILD_ARM ]]; then
      docker buildx build --platform linux/$system_arch --output type=docker -t ${REGISTRY}${image}-$system_arch . # add arch tag to non-amd64 image
    else
      docker buildx build --platform linux/amd64 --output type=docker -t ${REGISTRY}${image} .
    fi
  fi

  echo ${REGISTRY}${image} >> $BASE_DIR/dist/images.txt # even though we support arbitrary archs, we'll write out just the amd64 images to the list for now.

}

pushImages() {

  function ecr_check_create_repo {
    # ECR repos are individual resources - create if not present
    local repo=$1
    if [[ -z "$(aws ecr describe-repositories \
      --query "repositories[?repositoryName=='$repo'].repositoryName" \
      --output text)" ]]
    then
      info "No repo found for $repo - creating..."
      aws ecr create-repository --repository-name $repo \
        --image-scanning-configuration scanOnPush=true
    fi
  }

  # assert correct registry
  local imagecount=$(wc -l dist/images.txt | cut -f1 -d' ')
  local regcount=$(grep ^$REGISTRY dist/images.txt \
    | wc -l | cut -f1 -d' ')

  if (( $imagecount == $regcount )); then  # parens for arithmatic comparison
    aws ecr get-login-password --region us-west-2 \
      | docker login --password-stdin --username AWS $REGISTRY
    for image in $(cat $BASE_DIR/dist/images.txt); do
      repository=$(echo $image | sed -e 's#.*/##' -e 's/:.*//')  # strip registry prefix, tag suffix
      ecr_check_create_repo $repository
      docker push $image
    done
  else
    echo "ERROR: missing registry prefix in dist/images.txt?" 1>&2
    exit 1
  fi
}

getBranchSuffix() {
  git rev-parse --abbrev-ref HEAD | sed -E -e 's/[^-a-zA-Z0-9]/-/g'
}

getCommitHash() {
  git rev-parse --short HEAD | sed -E -e 's/[^-a-zA-Z0-9]/-/g'
}

images() {
  for d in $BASE_DIR/container-images/*/Dockerfile; do
    basename $(dirname $d)
  done
}

templateValues() {
  gitBranch="$(getBranchSuffix)"
  gitBranchRaw="$(git rev-parse --abbrev-ref HEAD)"
  gitHash="$(getCommitHash)"
  tag="$gitBranch-$gitHash"
  for image in $(images); do
    varname="$(echo $image | sed 's/-/_/g' | tr a-z A-Z)_VERSION"
    export $varname=$tag  # for envsubst below
  done
  mkdir -p dist
  envsubst < $BASE_DIR/values.yaml.tpl > $BASE_DIR/dist/values-mds.yaml
  echo "Wrote dist/values-mds.yaml"
  echo BRANCH=$gitBranchRaw > "dist/$gitBranch.properties"
  echo "Wrote dist/$gitBranch.properties"
}

produceDockerPackageJson() {
  local PACKAGE_NAME=$(basename $(pwd))
  cat package.json | jq 'del(."dependencies"."@mds-core/'${PACKAGE_NAME}'", ."dependencies"."@mds-core/mds-webpack-config")' > docker_package.json
}

CALL=$1; shift
$CALL $@
